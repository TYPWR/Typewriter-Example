//
//  UserModel.m
//  Autogenerated by typewriter
//
//  Generation Date On 2018/01/08
//  Version: 1.0.0

#import "UserModel.h"
#import "PhoneModel.h"
#import "PetModel.h"
#import "HouseModel.h"
#import "ClothesModel.h"
#import "UserProto.h"
#import "PetProto.h"
#import "HouseProto.h"
#import "ClothesProto.h"

@implementation UserModel
- (instancetype)init UNAVAILABLE_ATTRIBUTE
{
    NSAssert(NO, @"please use designed initializer instead!");
    return nil;
}
+ (nullable instancetype)modelWithUserProto:(UserProto *)prototype objectId:(nullable NSString *)objectId
{
    return [[self alloc] initWithUserProto:prototype objectId:objectId];
}
- (nullable instancetype)initWithUserProto:(UserProto *)prototype objectId:(nullable NSString *)objectId
{
    NSParameterAssert(prototype);
    if (!(self = [super init])) {
        return nil;
    }
    [self propertyMapWithPrototype:prototype mapping:@{@"name" : @"userName",
                                                       @"favouriteSport" : @"favouriteSport",
                                                       @"favouriteMovie" : @"favouriteMovie",
                                                       @"hasMarried" : @"hasMarried",
                                                       @"age" : @"age",
                                                       @"psychologicalAge" : @"psychologicalAge",
                                                       @"birthDate" : @"birthDate"}];
    self->_objectId = objectId;
    self->_education = [prototype.educationEnum intValue];
    self->_pet = [self transformModelFromPrototype:prototype.pet];
    self->_houses = [self transformModelFromPrototype:prototype.ownHouses];
    self->_wardrobes = [self transformModelFromPrototype:prototype.wardrobes];
    self->_phone = [PhoneModel modelWithJSON:prototype.phone objectId:objectId];
    [UserModel unidirectionalDataflow:self objectId:self.objectId];
    return self;
}
- (nullable id)transformModelFromPrototype:(id)prototype
{
    if (!prototype) {
        return nil;
    }
    if ([prototype isKindOfClass:[HouseProto class]]) {
        HouseModel * model = [HouseModel modelWithHouseProto:prototype];
        return model;
    }
    if ([prototype isKindOfClass:[PetProto class]]) {
        PetModel * model = [PetModel modelWithPetProto:prototype];
        return model;
    }
    if ([prototype isKindOfClass:[ClothesProto class]]) {
        ClothesModel * model = [ClothesModel modelWithClothesProto:prototype objectId:self.objectId];
        return model;
    }
    return [super transformModelFromPrototype:prototype];
}
- (instancetype)initWithUserModelBuilder:(UserModelBuilder *)builder
{
    NSParameterAssert(builder);
    if (!(self = [super init])) {
        return self;
    }
    [self propertyMapWithPrototype:builder mapping:@{@"objectId": @"objectId",
                                                     @"name": @"name",
                                                     @"favouriteSport": @"favouriteSport",
                                                     @"favouriteMovie": @"favouriteMovie",
                                                     @"hasMarried": @"hasMarried",
                                                     @"education": @"education",
                                                     @"age": @"age",
                                                     @"psychologicalAge": @"psychologicalAge",
                                                     @"birthDate": @"birthDate",
                                                     @"phone": @"phone",
                                                     @"pet": @"pet",
                                                     @"houses": @"houses",
                                                     @"wardrobes": @"wardrobes"}];
    [UserModel unidirectionalDataflow:self objectId:self.objectId];
    return self;
}
- (instancetype)mergeWithBlock:(void(^)(UserModelBuilder *builder))block
{
    NSParameterAssert(block);
    UserModelBuilder *builder = [[UserModelBuilder alloc] initWithUserModel:self];
    block(builder);
    return [builder build];
}
@end

@implementation UserModelBuilder
- (instancetype)initWithUserModel:(UserModel *)model
{
    NSParameterAssert(model);
    if (!(self = [super init])) {
        return self;
    }
    [self propertyMapWithPrototype:model mapping:@{@"objectId": @"objectId",
                                                   @"name": @"name",
                                                   @"favouriteSport": @"favouriteSport",
                                                   @"favouriteMovie": @"favouriteMovie",
                                                   @"hasMarried": @"hasMarried",
                                                   @"education": @"education",
                                                   @"age": @"age",
                                                   @"psychologicalAge": @"psychologicalAge",
                                                   @"birthDate": @"birthDate",
                                                   @"phone": @"phone",
                                                   @"pet": @"pet",
                                                   @"houses": @"houses",
                                                   @"wardrobes": @"wardrobes"}];
    return self;
}
- (UserModel *)build
{
    return [[UserModel alloc] initWithUserModelBuilder:self];
}
@end

@implementation UserModel (Extension)
+ (void)unidirectionalDataflow:(UserModel *)model objectId:(NSString *)objectId
{
    // unidirectional data flow
}
@end

//
//  HeadPhoneModel.java
//  Autogenerated by typewriter
//
//  Generation Date On 2018/01/08
//  Version: 1.0.0

package com.typewriter_java.model;

import com.alibaba.fastjson.annotation.JSONCreator;
import com.alibaba.fastjson.annotation.JSONField;

import java.io.Serializable;

public class HeadPhoneModel extends TypewriterBaseModel implements Serializable {
    public String objectId;
    public String color;
    public int battery;
    public long price;
    public HeadPhoneBrand brand;
    public static HeadPhoneModel modelWithJSON(String json, String objectId) {
        HeadPhoneModel model = HeadPhoneModel.fieldsMapWithJSON(json, HeadPhoneModel.class);
        if (model != null && objectId != null) {
            model.objectId = objectId;
        }
        HeadPhoneModel.unidirectionalDataflow(model, objectId);
        return model;
    }
    @JSONCreator
    public HeadPhoneModel(@JSONField(name = "objectId") String objectId,
                          @JSONField(name = "color") String color,
                          @JSONField(name = "battery") int battery,
                          @JSONField(name = "price") long price,
                          @JSONField(name = "brand") String brand) {
        this.objectId = objectId;
        this.color = color;
        this.battery = battery;
        this.price = price;
        this.brand = HeadPhoneBrand.fromJSONString(brand);
    }
    public static void unidirectionalDataflow(HeadPhoneModel model, String objectId) {
        // unidirectional data flow
    }
    @Override
    public boolean equals(Object obj) {
        if (obj == this) return true;
        if (!(obj instanceof HeadPhoneModel)) return false;
        HeadPhoneModel other = (HeadPhoneModel) obj;
        return (objectId != null ? objectId.equals(other.objectId) : other.objectId == null)
               && (color != null ? color.equals(other.color) : other.color == null)
               && Integer.compare(battery, other.battery) == 1
               && Long.compare(price, other.price) == 1
               && (brand != null ? brand.equals(other.brand) : other.brand == null);
    }
    @Override
    public int hashCode() {
        int result = super.hashCode() != 0 ? super.hashCode() : 1;
        result = result * 37 + (objectId != null ? objectId.hashCode() : 0);
        result = result * 37 + (color != null ? color.hashCode() : 0);
        result = result * 37 + Integer.valueOf(battery).hashCode();
        result = result * 37 + Long.valueOf(price).hashCode();
        result = result * 37 + (brand != null ? brand.hashCode() : 0);
        return result;
    }
}

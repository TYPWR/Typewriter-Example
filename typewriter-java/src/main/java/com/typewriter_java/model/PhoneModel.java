//
//  PhoneModel.java
//  Autogenerated by typewriter
//
//  Generation Date On 2018/01/08
//  Version: 1.0.0

package com.typewriter_java.model;

import com.alibaba.fastjson.annotation.JSONCreator;
import com.alibaba.fastjson.annotation.JSONField;

import java.io.Serializable;
import java.util.Map;
import java.util.HashMap;
import java.util.List;

public class PhoneModel extends TypewriterBaseModel implements Serializable {
    public String objectId;
    public final List<HeadPhoneModel> headPhone;
    public final Map<String, AppModel> apps;
    public final WirelessChargingModel charger;
    public final String price;
    public final PhoneBrand brand;
    public static PhoneModel modelWithJSON(String json, String objectId) {
        PhoneModel model = PhoneModel.fieldsMapWithJSON(json, PhoneModel.class);
        if (model != null && objectId != null) {
            model.objectId = objectId;
        }
        PhoneModel.unidirectionalDataflow(model, objectId);
        return model;
    }
    @JSONCreator
    public PhoneModel(@JSONField(name = "objectId") String objectId,
                      @JSONField(name = "headPhone") List<HeadPhoneModel> headPhone,
                      @JSONField(name = "apps") Map<String, AppModel> apps,
                      @JSONField(name = "charger") WirelessChargingModel charger,
                      @JSONField(name = "price") String price,
                      @JSONField(name = "brand") String brand) {
        this.objectId = objectId;
        this.headPhone = headPhone;
        this.apps = apps;
        this.charger = charger;
        this.price = price;
        this.brand = PhoneBrand.fromJSONString(brand);
    }
    @SuppressWarnings("unused")
    public static Map<String, String> customFieldsMapper() {
        Map<String, String> mapper = new HashMap<>();
        mapper.put("charger", "accessory.charger");
        mapper.put("headPhone", "accessory.headPhone");
        mapper.put("brand", "equipment.info.phoneBrand");
        mapper.put("charger.manufacturerNumber", "charger.equipment.info.manufacturerNumber");
        return mapper;
    }
    public Builder builder() {
        Builder builder = new Builder();
        builder.objectId = objectId;
        builder.headPhone = headPhone;
        builder.apps = apps;
        builder.charger = charger;
        builder.price = price;
        builder.brand = brand;
        return builder;
    }
    public static void unidirectionalDataflow(PhoneModel model, String objectId) {
        // unidirectional data flow
    }
    @Override
    public boolean equals(Object obj) {
        if (obj == this) return true;
        if (!(obj instanceof PhoneModel)) return false;
        PhoneModel other = (PhoneModel) obj;
        return (objectId != null ? objectId.equals(other.objectId) : other.objectId == null)
               && (headPhone != null ? headPhone.equals(other.headPhone) : other.headPhone == null)
               && (apps != null ? apps.equals(other.apps) : other.apps == null)
               && (charger != null ? charger.equals(other.charger) : other.charger == null)
               && (price != null ? price.equals(other.price) : other.price == null)
               && (brand != null ? brand.equals(other.brand) : other.brand == null);
    }
    @Override
    public int hashCode() {
        int result = super.hashCode() != 0 ? super.hashCode() : 1;
        result = result * 37 + (objectId != null ? objectId.hashCode() : 0);
        result = result * 37 + (headPhone != null ? headPhone.hashCode() : 0);
        result = result * 37 + (apps != null ? apps.hashCode() : 0);
        result = result * 37 + (charger != null ? charger.hashCode() : 0);
        result = result * 37 + (price != null ? price.hashCode() : 0);
        result = result * 37 + (brand != null ? brand.hashCode() : 0);
        return result;
    }
    public class Builder {
        public String objectId;
        public List<HeadPhoneModel> headPhone;
        public Map<String, AppModel> apps;
        public WirelessChargingModel charger;
        public String price;
        public PhoneBrand brand;
        public Builder objectId(String objectId) {
            this.objectId = objectId;
            return this;
        }
        public Builder headPhone(List<HeadPhoneModel> headPhone) {
            this.headPhone = headPhone;
            return this;
        }
        public Builder apps(Map<String, AppModel> apps) {
            this.apps = apps;
            return this;
        }
        public Builder charger(WirelessChargingModel charger) {
            this.charger = charger;
            return this;
        }
        public Builder price(String price) {
            this.price = price;
            return this;
        }
        public Builder brand(PhoneBrand brand) {
            this.brand = brand;
            return this;
        }
        public PhoneModel build() {
            PhoneModel model = new PhoneModel(objectId,
                                  headPhone,
                                  apps,
                                  charger,
                                  price,
                                  PhoneBrand.toJSONString(brand));
            PhoneModel.unidirectionalDataflow(model, model.objectId);
            return model;
        }
    }
}

// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ClothesPb.proto

package com.typewriter_java.protocolBuffer;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import com.typewriter_java.annotation.RepeatableTypewriter;
import com.typewriter_java.annotation.Typewriter;
import com.typewriter_java.annotation.TypewriterOption;

import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

@RepeatableTypewriter({
        @Typewriter(generate = "ClothesPbModel"),
        @Typewriter(inherit = "TypewriterBaseModel"),
        @Typewriter(implement = {"Serializable"}),
        @Typewriter({TypewriterOption.commentOut, TypewriterOption.unidirectionDataflow})
})
public final class ClothesPb extends Message<ClothesPb, ClothesPb.Builder> {
  public static final ProtoAdapter<ClothesPb> ADAPTER = new ProtoAdapter_ClothesPb();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_TYPE = "";

  public static final Integer DEFAULT_PRICE = 0;

  public static final String DEFAULT_BRAND = "";

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String type;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer price;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String brand;

  public ClothesPb(String type, Integer price, String brand) {
    this(type, price, brand, ByteString.EMPTY);
  }

  public ClothesPb(String type, Integer price, String brand, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.type = type;
    this.price = price;
    this.brand = brand;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.type = type;
    builder.price = price;
    builder.brand = brand;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ClothesPb)) return false;
    ClothesPb o = (ClothesPb) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(type, o.type)
        && Internal.equals(price, o.price)
        && Internal.equals(brand, o.brand);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (type != null ? type.hashCode() : 0);
      result = result * 37 + (price != null ? price.hashCode() : 0);
      result = result * 37 + (brand != null ? brand.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (type != null) builder.append(", type=").append(type);
    if (price != null) builder.append(", price=").append(price);
    if (brand != null) builder.append(", brand=").append(brand);
    return builder.replace(0, 2, "ClothesPb{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<ClothesPb, Builder> {
    public String type;

    public Integer price;

    public String brand;

    public Builder() {
    }

    public Builder type(String type) {
      this.type = type;
      return this;
    }

    public Builder price(Integer price) {
      this.price = price;
      return this;
    }

    public Builder brand(String brand) {
      this.brand = brand;
      return this;
    }

    @Override
    public ClothesPb build() {
      return new ClothesPb(type, price, brand, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_ClothesPb extends ProtoAdapter<ClothesPb> {
    public ProtoAdapter_ClothesPb() {
      super(FieldEncoding.LENGTH_DELIMITED, ClothesPb.class);
    }

    @Override
    public int encodedSize(ClothesPb value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.type)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.price)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.brand)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, ClothesPb value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.type);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.price);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.brand);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public ClothesPb decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.type(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.price(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.brand(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public ClothesPb redact(ClothesPb value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}

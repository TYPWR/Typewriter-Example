// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: HousePb.proto

package com.typewriter_java.protocolBuffer;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import com.typewriter_java.annotation.RepeatableTypewriter;
import com.typewriter_java.annotation.Typewriter;
import com.typewriter_java.annotation.TypewriterOption;

import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

@RepeatableTypewriter({
        @Typewriter(generate = "HousePbModel"),
        @Typewriter(inherit = "TypewriterBaseModel"),
        @Typewriter(implement = {"Serializable"}),
        @Typewriter(TypewriterOption.constructOnly)
})
public final class HousePb extends Message<HousePb, HousePb.Builder> {
  public static final ProtoAdapter<HousePb> ADAPTER = new ProtoAdapter_HousePb();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_AREA = 0;

  public static final Boolean DEFAULT_ISSCHOOLDISTRICT = false;

  public static final String DEFAULT_LOCATION = "";

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer area;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean isSchoolDistrict;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String location;

  public HousePb(Integer area, Boolean isSchoolDistrict, String location) {
    this(area, isSchoolDistrict, location, ByteString.EMPTY);
  }

  public HousePb(Integer area, Boolean isSchoolDistrict, String location,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.area = area;
    this.isSchoolDistrict = isSchoolDistrict;
    this.location = location;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.area = area;
    builder.isSchoolDistrict = isSchoolDistrict;
    builder.location = location;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof HousePb)) return false;
    HousePb o = (HousePb) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(area, o.area)
        && Internal.equals(isSchoolDistrict, o.isSchoolDistrict)
        && Internal.equals(location, o.location);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (area != null ? area.hashCode() : 0);
      result = result * 37 + (isSchoolDistrict != null ? isSchoolDistrict.hashCode() : 0);
      result = result * 37 + (location != null ? location.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (area != null) builder.append(", area=").append(area);
    if (isSchoolDistrict != null) builder.append(", isSchoolDistrict=").append(isSchoolDistrict);
    if (location != null) builder.append(", location=").append(location);
    return builder.replace(0, 2, "HousePb{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<HousePb, Builder> {
    public Integer area;

    public Boolean isSchoolDistrict;

    public String location;

    public Builder() {
    }

    public Builder area(Integer area) {
      this.area = area;
      return this;
    }

    public Builder isSchoolDistrict(Boolean isSchoolDistrict) {
      this.isSchoolDistrict = isSchoolDistrict;
      return this;
    }

    public Builder location(String location) {
      this.location = location;
      return this;
    }

    @Override
    public HousePb build() {
      return new HousePb(area, isSchoolDistrict, location, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_HousePb extends ProtoAdapter<HousePb> {
    public ProtoAdapter_HousePb() {
      super(FieldEncoding.LENGTH_DELIMITED, HousePb.class);
    }

    @Override
    public int encodedSize(HousePb value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.area)
          + ProtoAdapter.BOOL.encodedSizeWithTag(2, value.isSchoolDistrict)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.location)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, HousePb value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.area);
      ProtoAdapter.BOOL.encodeWithTag(writer, 2, value.isSchoolDistrict);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.location);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public HousePb decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.area(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.isSchoolDistrict(ProtoAdapter.BOOL.decode(reader)); break;
          case 3: builder.location(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public HousePb redact(HousePb value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
